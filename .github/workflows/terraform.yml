name: "Terraform Infrastructure"

on:
  push:
    branches: ["main"]
    paths-ignore:
      - "**/*.md"
  workflow_dispatch:
  workflow_call:

env:
  AZ_CREDENTIALS: >
    {
      "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
      "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
      "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}",
      "tenantId": "${{ secrets.AZURE_TENANT_ID }}"
    }

jobs:
  terraform:
    name: "Provision infrastructure"
    runs-on: ubuntu-latest

    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

    outputs:
      acr_name: ${{ steps.details.outputs.acr_name }}
      acr_login_server: ${{ steps.details.outputs.acr_login_server }}
      container_app_name: ${{ steps.details.outputs.container_app_name }}
      resource_group_name: ${{ steps.details.outputs.resource_group_name }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"

      - name: TF Init
        working-directory: ./terraform
        run: terraform init

      - name: TF Plan
        working-directory: ./terraform
        run: terraform plan -input=false

      - name: TF Apply
        working-directory: ./terraform
        run: terraform apply -auto-approve -input=false

      - name: Get output
        id: details
        working-directory: ./terraform
        run: |
          ACR_NAME=$(terraform output -raw acr_name)
          ACR_LOGIN_SERVER=$(terraform output -raw acr_login_server)
          CONTAINER_APP_NAME=$(terraform output -raw container_app_name)
          RESOURCE_GROUP_NAME=$(terraform output -raw resource_group_name)

          echo "acr_name=$ACR_NAME" >> $GITHUB_OUTPUT
          echo "acr_login_server=$ACR_LOGIN_SERVER" >> $GITHUB_OUTPUT
          echo "container_app_name=$CONTAINER_APP_NAME" >> $GITHUB_OUTPUT
          echo "resource_group_name=$RESOURCE_GROUP_NAME" >> $GITHUB_OUTPUT

  build:
    name: "Build and publish Docker image"
    runs-on: ubuntu-latest
    needs: terraform

    outputs:
      image_tag: ${{ steps.image_details.outputs.image_tag }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ env.AZ_CREDENTIALS }}

      - name: Login to ACR
        uses: docker/login-action@v3
        with:
          registry: ${{ needs.terraform.outputs.acr_login_server }}
          username: ${{ secrets.AZURE_CLIENT_ID }}
          password: ${{ secrets.AZURE_CLIENT_SECRET }}

      - name: Build and push container image to ACR
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ${{ needs.terraform.outputs.acr_login_server }}/pytest:${{ github.sha }}
          context: .

      - name: Set image tag output
        id: image_details
        run: |
          echo "image_tag=${{ needs.terraform.outputs.acr_login_server }}/pytest:${{ github.sha }}" >> $GITHUB_OUTPUT

  deploy:
    name: "Deploy to Azure"
    runs-on: ubuntu-latest
    needs: [terraform, build]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ env.AZ_CREDENTIALS }}

      - name: Deploy to Azure Container Apps
        uses: azure/container-apps-deploy-action@v1
        with:
          imageToDeploy: ${{ needs.build.outputs.image_tag }}
          resourceGroup: ${{ needs.terraform.outputs.resource_group_name }}
          containerAppName: ${{ needs.terraform.outputs.container_app_name }}
          targetPort: 8080

      - name: Get deployment URLs
        run: |
          echo "Container App deployed successfully!"
          echo "Image: ${{ needs.build.outputs.image_tag }}"
          echo "Resource Group: ${{ needs.terraform.outputs.resource_group_name }}"
          echo "Container App: ${{ needs.terraform.outputs.container_app_name }}"
